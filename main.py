import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
from datetime import datetime, timedelta
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import backend as K
from tensorflow.keras.layers import Layer
import pickle
import traceback

# ============================================================================
# PAGE CONFIGURATION
# ============================================================================
st.set_page_config(
    page_title="H·ªá Th·ªëng D·ª± ƒêo√°n T·ª≠ Vong ICU",
    page_icon="üè•",
    layout="wide"
)

# Custom CSS
st.markdown("""
<style>
.metric-card {
    background-color: #f0f2f6;
    padding: 20px;
    border-radius: 10px;
    border-left: 5px solid #1f77b4;
    margin: 10px 0;
}
/* --- ADD THESE NEW CLASSES --- */
.metric-value {
    color: black !important;
}
.metric-value-increase {
    color: #d62728 !important; /* Red */
}
.metric-value-decrease {
    color: #2ca02c !important; /* Green */
}
.metric-value-neutral {
    color: #1f77b4 !important; /* Blue */
}
/* --------------------------- */
.high-risk {
    border-left-color: #d62728 !important;
    background-color: #ffe6e6 !important;
}
.medium-risk {
    border-left-color: #ff7f0e !important;
    background-color: #fff4e6 !important;
}
.low-risk {
    border-left-color: #2ca02c !important;
    background-color: #e6ffe6 !important;
}
.feature-updated {
    background-color: #fff3cd;
    padding: 8px 12px;
    border-radius: 5px;
    border-left: 3px solid #ffc107;
    margin: 5px 0;
    font-weight: 500;
}
.feature-new {
    background-color: #d1ecf1;
    padding: 8px 12px;
    border-radius: 5px;
    border-left: 3px solid #17a2b8;
    margin: 5px 0;
    font-weight: 500;
}
</style>
""", unsafe_allow_html=True)

# ============================================================================
# CUSTOM GRU-D LAYER
# ============================================================================
class GRUDCell(Layer):
    def __init__(self, units, feature_dim, **kwargs):
        super(GRUDCell, self).__init__(**kwargs)
        self.units = units
        self.feature_dim = feature_dim
        self.state_size = units
        self.output_size = units

    def build(self, input_shape):
        self.W_z = self.add_weight(shape=(self.feature_dim, self.units), name='W_z', initializer='glorot_uniform')
        self.U_z = self.add_weight(shape=(self.units, self.units), name='U_z', initializer='orthogonal')
        self.b_z = self.add_weight(shape=(self.units,), name='b_z', initializer='zeros')
        self.W_r = self.add_weight(shape=(self.feature_dim, self.units), name='W_r', initializer='glorot_uniform')
        self.U_r = self.add_weight(shape=(self.units, self.units), name='U_r', initializer='orthogonal')
        self.b_r = self.add_weight(shape=(self.units,), name='b_r', initializer='zeros')
        self.W_h = self.add_weight(shape=(self.feature_dim, self.units), name='W_h', initializer='glorot_uniform')
        self.U_h = self.add_weight(shape=(self.units, self.units), name='U_h', initializer='orthogonal')
        self.b_h = self.add_weight(shape=(self.units,), name='b_h', initializer='zeros')
        self.gamma_x_decay = self.add_weight(shape=(self.feature_dim,), name='gamma_x_decay', initializer='ones')
        self.gamma_h_decay = self.add_weight(shape=(self.units,), name='gamma_h_decay', initializer='ones')
        self.mean_imputation = self.add_weight(shape=(self.feature_dim,), name='mean_imputation', initializer='zeros', trainable=False)
        self.built = True

    def call(self, inputs, states):
        x = inputs[:, :self.feature_dim]
        m = inputs[:, self.feature_dim : 2 * self.feature_dim]
        delta_t = inputs[:, 2 * self.feature_dim:]
        
        h_prev = states[0]

        gamma_x = tf.exp(-tf.maximum(0.0, self.gamma_x_decay) * delta_t)
        x_decayed = m * x + (1 - m) * (gamma_x * x + (1 - gamma_x) * self.mean_imputation)
        
        gamma_h = tf.exp(-tf.maximum(0.0, self.gamma_h_decay) * delta_t)
        h_decayed = gamma_h * h_prev
        
        z = tf.sigmoid(K.dot(x_decayed, self.W_z) + K.dot(h_decayed, self.U_z) + self.b_z)
        r = tf.sigmoid(K.dot(x_decayed, self.W_r) + K.dot(h_decayed, self.U_r) + self.b_r)
        h_hat = tf.tanh(K.dot(x_decayed, self.W_h) + K.dot(r * h_decayed, self.U_h) + self.b_h)
        h_new = (1 - z) * h_decayed + z * h_hat
        
        return h_new, [h_new]

    def get_config(self):
        config = super(GRUDCell, self).get_config()
        config.update({'units': self.units, 'feature_dim': self.feature_dim})
        return config

# ============================================================================
# MODEL BUILDING FUNCTION
# ============================================================================
def build_model(dynamic_shape, static_shape, max_events=200):
    """Builds the Keras model from scratch."""
    values_input = keras.layers.Input(shape=(max_events, dynamic_shape), name='values')
    mask_input = keras.layers.Input(shape=(max_events, dynamic_shape), name='mask')
    time_gaps_input = keras.layers.Input(shape=(max_events, 1), name='time_gaps')
    static_input = keras.layers.Input(shape=(static_shape,), name='static')

    concatenated_input = keras.layers.Concatenate(axis=-1)([values_input, mask_input, time_gaps_input])

    grud_cell = GRUDCell(units=64, feature_dim=dynamic_shape)
    grud_output = keras.layers.RNN(grud_cell, return_sequences=False)(concatenated_input)

    static_x = keras.layers.Dense(32, activation='relu')(static_input)
    static_x = keras.layers.BatchNormalization()(static_x)
    static_x = keras.layers.Dropout(0.4)(static_x)

    combined = keras.layers.Concatenate()([grud_output, static_x])
    shared_dense = keras.layers.Dense(64, activation='relu')(combined)
    shared_dense = keras.layers.BatchNormalization()(shared_dense)
    shared_dense = keras.layers.Dropout(0.5)(shared_dense)
    
    mortality_output = keras.layers.Dense(1, activation='sigmoid', name='mortality')(shared_dense)
    los_output = keras.layers.Dense(1, activation='linear', name='los')(shared_dense)

    model = keras.Model(
        inputs={
            'values': values_input, 
            'mask': mask_input, 
            'time_gaps': time_gaps_input, 
            'static': static_input
        },
        outputs={
            'mortality': mortality_output, 
            'los': los_output
        }
    )
    return model

# ============================================================================
# DATA LOADING AND FEATURE DEFINITIONS
# ============================================================================
@st.cache_resource
def load_model_and_scaler():
    try:
        dynamic_feature_count = len(DYNAMIC_FEATURES)
        static_feature_count = len(STATIC_FEATURES)
        model = build_model(dynamic_shape=dynamic_feature_count, static_shape=static_feature_count)
        model.load_weights('better_model_weights.h5')

        with open('scaler.pkl', 'rb') as f:
            scaler_data = pickle.load(f)
            scaler = scaler_data['scaler']
            feature_names = scaler_data['feature_names']
            
        return model, scaler, feature_names, None
    except Exception as e:
        return None, None, None, str(e)

DYNAMIC_FEATURES = [
    'Unnamed: 0',
    'heart_rate', 'systolic_bp', 'diastolic_bp', 'mean_bp', 'temperature', 'spo2', 'respiratory_rate',
    'gcs_total', 'lactate', 'creatinine', 'wbc', 'hemoglobin', 'drug_vasopressor_inotropes',
    'drug_sedative_analgesic', 'drug_antibiotic_broad', 'drug_diuretic', 'drug_anticoagulant',
    'drug_corticosteroid'
]
CATEGORICAL_FEATURES = [
    'insurance_group_INS_medicaid', 'insurance_group_INS_medicare', 'insurance_group_INS_other',
    'ethnicity_group_ETH_asian', 'ethnicity_group_ETH_black', 'ethnicity_group_ETH_latino',
    'ethnicity_group_ETH_other', 'ethnicity_group_ETH_white', 'marital_group_MAR_divorced',
    'marital_group_MAR_married', 'marital_group_MAR_single', 'marital_group_MAR_unknown',
    'marital_group_MAR_widowed', 'admission_type_AMBULATORY OBSERVATION', 'admission_type_DIRECT EMER.',
    'admission_type_DIRECT OBSERVATION', 'admission_type_ELECTIVE', 'admission_type_EU OBSERVATION',
    'admission_type_EW EMER.', 'admission_type_OBSERVATION ADMIT',
    'admission_type_SURGICAL SAME DAY ADMISSION', 'admission_type_URGENT',
    'first_careunit_Cardiac Vascular Intensive Care Unit (CVICU)', 'first_careunit_Coronary Care Unit (CCU)',
    'first_careunit_Intensive Care Unit (ICU)', 'first_careunit_Med/Surg',
    'first_careunit_Medical Intensive Care Unit (MICU)',
    'first_careunit_Medical/Surgical Intensive Care Unit (MICU/SICU)', 'first_careunit_Medicine',
    'first_careunit_Medicine/Cardiology Intermediate', 'first_careunit_Neuro Intermediate',
    'first_careunit_Neuro Stepdown', 'first_careunit_Neuro Surgical Intensive Care Unit (Neuro SICU)',
    'first_careunit_Neurology', 'first_careunit_PACU', 'first_careunit_Surgery/Trauma',
    'first_careunit_Surgery/Vascular/Intermediate', 'first_careunit_Surgical Intensive Care Unit (SICU)',
    'first_careunit_Trauma SICU (TSICU)'
]
STATIC_FEATURES = ['age', 'GENDER_f'] + CATEGORICAL_FEATURES
FEATURE_LABELS = {
    'heart_rate': 'Nh·ªãp tim (bpm)', 'systolic_bp': 'HA t√¢m thu (mmHg)', 'diastolic_bp': 'HA t√¢m tr∆∞∆°ng (mmHg)',
    'mean_bp': 'HA trung b√¨nh (mmHg)', 'temperature': 'Nhi·ªát ƒë·ªô (¬∞C)', 'spo2': 'SpO2 (%)',
    'respiratory_rate': 'Nh·ªãp th·ªü (/ph√∫t)', 'gcs_total': 'GCS Score', 'lactate': 'Lactate (mmol/L)',
    'creatinine': 'Creatinine (mg/dL)', 'wbc': 'WBC (√ó10‚Åπ/L)', 'hemoglobin': 'Hemoglobin (g/dL)',
    'platelets': 'Ti·ªÉu c·∫ßu (√ó10‚Åπ/L)',
    'drug_vasopressor_inotropes': 'Thu·ªëc v·∫≠n m·∫°ch',
    'drug_sedative_analgesic': 'An th·∫ßn/gi·∫£m ƒëau',
    'drug_antibiotic_broad': 'Kh√°ng sinh ph·ªï r·ªông',
    'drug_diuretic': 'L·ª£i ti·ªÉu',
    'drug_anticoagulant': 'Ch·ªëng ƒë√¥ng',
    'drug_corticosteroid': 'Corticosteroid'
}

def get_categorical_options():
    options = {}
    for feature in CATEGORICAL_FEATURES:
        parts = feature.split('_', 2)
        group, value = parts[0] + '_' + parts[1], parts[2]
        if group not in options: options[group] = []
        options[group].append(value)
    return options
categorical_options = get_categorical_options()

# ============================================================================
# PREDICTION FUNCTIONS
# ============================================================================
def prepare_patient_for_prediction(patient_info, patient_events, scaler, feature_names, max_events=200):
    if not patient_events:
        return None

    df_events = pd.DataFrame(patient_events)
    df_events['event_time'] = pd.to_datetime(df_events['event_time'])
    df_events = df_events.sort_values('event_time')
    
    df = pd.DataFrame()
    all_features = DYNAMIC_FEATURES + STATIC_FEATURES
    for col in all_features:
        if col in df_events.columns:
            df[col] = df_events[col]
        elif col in patient_info.index:
            df[col] = patient_info[col]
        else:
            df[col] = 0
            
    if 'gender' in df.columns and 'GENDER_f' not in df.columns:
        df['GENDER_f'] = df['gender']
        df = df.drop(columns=['gender'])
    
    df_for_scaling = pd.DataFrame(columns=feature_names)
    df_for_scaling = pd.concat([df_for_scaling, df], ignore_index=True)
    df_for_scaling = df_for_scaling[feature_names].fillna(0)
    
    features_to_scale = [f for f in feature_names if f in df_for_scaling.columns and f not in ['id', 'name', 'hadm_id']]
    
    df_for_scaling[features_to_scale] = df_for_scaling[features_to_scale].astype(float)

    df_scaled = df_for_scaling.copy()
    try:
        df_scaled[features_to_scale] = scaler.transform(df_scaled[features_to_scale])
    except Exception as e:
        st.error(f"Scaling error: {e}. Check feature consistency.")
        return None

    dynamic_cols = [col for col in DYNAMIC_FEATURES if col in df_scaled.columns]
    mask = ~df_for_scaling[dynamic_cols].isna().values
    df_scaled[dynamic_cols] = df_scaled[dynamic_cols].ffill().fillna(0)
    dynamic_values = df_scaled[dynamic_cols].values

    time_diffs = df_events['event_time'].diff().dt.total_seconds().div(3600).fillna(0).values.reshape(-1, 1)
    
    static_cols_ordered = [sc for sc in STATIC_FEATURES if sc in df_scaled.columns]
    static_values = df_scaled[static_cols_ordered].iloc[0].values

    if len(dynamic_values) > max_events:
        dynamic_values, mask, time_diffs = dynamic_values[-max_events:], mask[-max_events:], time_diffs[-max_events:]
    else:
        pad_len = max_events - len(dynamic_values)
        dynamic_values = np.pad(dynamic_values, ((0, pad_len), (0, 0)))
        mask = np.pad(mask, ((0, pad_len), (0, 0)))
        time_diffs = np.pad(time_diffs, ((0, pad_len), (0, 0)))
    
    return {
        'values': np.expand_dims(dynamic_values, axis=0),
        'mask': np.expand_dims(mask.astype(float), axis=0),
        'time_gaps': np.expand_dims(time_diffs, axis=0),
        'static': np.expand_dims(static_values, axis=0)
    }

def predict_mortality(patient_info, patient_data, model, scaler, feature_names):
    try:
        x = prepare_patient_for_prediction(patient_info, patient_data, scaler, feature_names)
        if x is None: 
            return None, None
        
        predictions = model.predict(x, verbose=0)
        mortality_risk = float(predictions['mortality'][0][0])
        los_pred = float(predictions['los'][0][0])
        return mortality_risk, los_pred
    except Exception as e:
        st.error("L·ªói chi ti·∫øt trong qu√° tr√¨nh d·ª± ƒëo√°n:")
        st.error(f"Lo·∫°i l·ªói (Error Type): {type(e)}")
        st.error(f"Th√¥ng b√°o l·ªói (Error Message): {e}")
        st.code(traceback.format_exc()) 
        return None, None

# ============================================================================
# DATA INITIALIZATION FUNCTION
# ============================================================================
def load_initial_data():
    """Loads and processes a single CSV into patient and event data structures."""
    try:
        full_df = pd.read_csv('patient_data.csv')
        full_df['event_time'] = pd.to_datetime(full_df['event_time'])

        static_cols = ['hadm_id', 'age', 'GENDER_f'] + CATEGORICAL_FEATURES
        for col in static_cols:
            if col not in full_df.columns:
                full_df[col] = 0
        
        patients_df = full_df[static_cols].drop_duplicates(subset=['hadm_id']).copy()
        
        patients_df.rename(columns={'hadm_id': 'id', 'GENDER_f': 'gender'}, inplace=True)
        patients_df['name'] = patients_df['id'].apply(lambda x: f"B·ªánh nh√¢n {x}")
        
        patients_df['gender'] = patients_df['gender'].astype(int)

        st.session_state.patient_db = patients_df
        st.session_state.next_patient_id = patients_df['id'].max() + 1 if not patients_df.empty else 1

        event_cols = DYNAMIC_FEATURES + ['hadm_id', 'event_time']
        existing_event_cols = [col for col in event_cols if col in full_df.columns]
        events_df = full_df[existing_event_cols]
        
        base_events = {}
        for patient_id, group in events_df.groupby('hadm_id'):
            group = group.sort_values('event_time')
            base_events[patient_id] = group.to_dict('records')
        st.session_state.base_events = base_events
        
        patient_ids = patients_df['id'].tolist()
        st.session_state.patient_events = {pid: [] for pid in patient_ids}
        st.session_state.prediction_history = {pid: [] for pid in patient_ids}
        st.session_state.simulation_index = {pid: 0 for pid in patient_ids}
        st.success("T·∫£i d·ªØ li·ªáu b·ªánh nh√¢n c∆° b·∫£n th√†nh c√¥ng!")
        
    except FileNotFoundError:
        st.warning("`patient_data.csv` not found. Starting with an empty database.")
        st.session_state.patient_db = pd.DataFrame(columns=['id', 'name', 'age', 'gender'] + CATEGORICAL_FEATURES)
        st.session_state.next_patient_id = 1
        st.session_state.base_events = {}
        st.session_state.patient_events = {}
        st.session_state.prediction_history = {}
        st.session_state.simulation_index = {}
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i d·ªØ li·ªáu: {e}")
        st.stop()

# ============================================================================
# SESSION STATE INITIALIZATION & MODEL LOADING
# ============================================================================
if 'patient_db' not in st.session_state:
    load_initial_data()

model, scaler, feature_names, model_error = load_model_and_scaler()

# ============================================================================
# SIDEBAR
# ============================================================================
st.sidebar.title("üè• H·ªá Th·ªëng D·ª± ƒêo√°n ICU")
st.sidebar.markdown("---")
page = st.sidebar.radio("**Ch·ªçn Ch·ª©c NƒÉng:**", ["üè• ƒêƒÉng k√Ω b·ªánh nh√¢n", "ü©∫ Theo d√µi th·ªùi gian th·ª±c"], label_visibility="collapsed")
st.sidebar.markdown("---")
st.sidebar.metric("üìã S·ªë b·ªánh nh√¢n", len(st.session_state.patient_db))
if model_error:
    st.sidebar.warning(f"‚ö†Ô∏è L·ªói Model: {model_error}")
else:
    st.sidebar.success("‚úÖ Model ƒë√£ s·∫µn s√†ng")

# ============================================================================
# PAGE 1: REGISTER PATIENT
# ============================================================================
if page == "üè• ƒêƒÉng k√Ω b·ªánh nh√¢n":
    st.title("üè• ƒêƒÉng K√Ω B·ªánh Nh√¢n M·ªõi")

    with st.form("new_patient_form"):
        col1, col2, col3 = st.columns(3)
        with col1:
            st.subheader("Th√¥ng tin c∆° b·∫£n")
            name = st.text_input("T√™n b·ªánh nh√¢n:")
            age = st.number_input("Tu·ªïi:", 18, 100, 65)
            gender = st.selectbox("Gi·ªõi t√≠nh:", ["Nam", "N·ªØ"])

        with col2:
            st.subheader("Th√¥ng tin h√†nh ch√≠nh")
            insurance = st.selectbox("B·∫£o hi·ªÉm:", categorical_options['insurance_group'])
            ethnicity = st.selectbox("D√¢n t·ªôc:", categorical_options['ethnicity_group'])
            marital = st.selectbox("T√¨nh tr·∫°ng h√¥n nh√¢n:", categorical_options['marital_group'])

        with col3:
            st.subheader("Th√¥ng tin nh·∫≠p vi·ªán")
            admission_type = st.selectbox("Lo·∫°i nh·∫≠p vi·ªán:", categorical_options['admission_type'])
            careunit = st.selectbox("ƒê∆°n v·ªã chƒÉm s√≥c:", categorical_options['first_careunit'])

        submitted = st.form_submit_button("‚ûï Th√™m B·ªánh Nh√¢n", type="primary", use_container_width=True)

    if submitted:
        if not name.strip():
            st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p t√™n b·ªánh nh√¢n")
        else:
            new_id = st.session_state.next_patient_id
            
            new_patient_data = {
                'id': new_id,
                'name': name,
                'age': age,
                'gender': 1 if gender == "N·ªØ" else 0
            }
            
            for feature in CATEGORICAL_FEATURES:
                new_patient_data[feature] = 0
            
            new_patient_data[f"insurance_group_{insurance}"] = 1
            new_patient_data[f"ethnicity_group_{ethnicity}"] = 1
            new_patient_data[f"marital_group_{marital}"] = 1
            new_patient_data[f"admission_type_{admission_type}"] = 1
            new_patient_data[f"first_careunit_{careunit}"] = 1

            new_row_df = pd.DataFrame([new_patient_data])
            st.session_state.patient_db = pd.concat([st.session_state.patient_db, new_row_df], ignore_index=True)
            
            st.session_state.patient_events[new_id] = []
            st.session_state.prediction_history[new_id] = []
            st.session_state.simulation_index[new_id] = 0
            st.session_state.next_patient_id += 1
            
            st.success(f"‚úÖ ƒê√£ th√™m b·ªánh nh√¢n {name} (ID: {new_id})")
            st.balloons()

    st.markdown("---")
    st.subheader("üìã Danh S√°ch B·ªánh Nh√¢n")
    if not st.session_state.patient_db.empty:
        display_df = st.session_state.patient_db[['id', 'name', 'age', 'gender']].copy()
        display_df['gender'] = display_df['gender'].map({0: 'Nam', 1: 'N·ªØ'})
        display_df['S·ªë s·ª± ki·ªán'] = display_df['id'].map(lambda x: len(st.session_state.patient_events.get(x, [])))
        display_df.columns = ['ID', 'T√™n', 'Tu·ªïi', 'Gi·ªõi t√≠nh', 'S·ªë s·ª± ki·ªán']
        st.dataframe(display_df, use_container_width=True)
    else:
        st.info("Ch∆∞a c√≥ b·ªánh nh√¢n n√†o.")

# ============================================================================
# PAGE 2: REAL-TIME MONITORING
# ============================================================================
else:
    st.title("ü©∫ Theo D√µi Th·ªùi Gian Th·ª±c & D·ª± ƒêo√°n")

    if model is None:
        st.error(f"‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh. L·ªói: {model_error}")
        st.stop()
    if st.session_state.patient_db.empty:
        st.warning("‚ö†Ô∏è Ch∆∞a c√≥ b·ªánh nh√¢n n√†o. H√£y th√™m ·ªü trang 'ƒêƒÉng k√Ω b·ªánh nh√¢n'.")
        st.stop()

    patient_id = st.selectbox(
        "üîé Ch·ªçn B·ªánh Nh√¢n", st.session_state.patient_db['id'].tolist(),
        format_func=lambda x: f"ID {x}: {st.session_state.patient_db.loc[st.session_state.patient_db['id']==x, 'name'].iloc[0]}"
    )
    
    patient_info = st.session_state.patient_db.loc[st.session_state.patient_db['id'] == patient_id].iloc[0]
    
    st.markdown(f"### üë§ {patient_info['name']} | {patient_info['age']} tu·ªïi | {'N·ªØ' if patient_info['gender'] == 1 else 'Nam'}")
    
    col1, col2 = st.columns([1, 1])
    with col1:
        is_base_patient = patient_id in st.session_state.base_events
        
        if st.button("üìà T·∫£i S·ª± Ki·ªán Ti·∫øp Theo (M√¥ ph·ªèng)", use_container_width=True, type="primary", disabled=not is_base_patient):
            sim_index = st.session_state.simulation_index.get(patient_id, 0)
            base_events_list = st.session_state.base_events[patient_id]
            
            if sim_index < len(base_events_list):
                new_event = base_events_list[sim_index].copy()
                st.session_state.patient_events[patient_id].append(new_event)
                st.session_state.simulation_index[patient_id] += 1
                st.success(f"‚úÖ ƒê√£ t·∫£i s·ª± ki·ªán m√¥ ph·ªèng #{sim_index + 1}")
                st.rerun()
            else:
                st.info("ƒê√£ h·∫øt s·ª± ki·ªán m√¥ ph·ªèng cho b·ªánh nh√¢n n√†y.")
    
    with col2:
        auto_predict = st.checkbox("üîÑ T·ª± ƒë·ªông d·ª± ƒëo√°n", value=True)
        if not is_base_patient:
            st.caption("Ch·∫ø ƒë·ªô m√¥ ph·ªèng ch·ªâ d√†nh cho b·ªánh nh√¢n c√≥ s·∫µn (t·∫£i t·ª´ file).")

    # Prediction Logic
    events = st.session_state.patient_events.get(patient_id, [])
    history = st.session_state.prediction_history.get(patient_id, [])
    last_pred_count = history[-1]['event_count'] if history else -1

    if auto_predict and len(events) > 0 and len(events) != last_pred_count:
        with st.spinner("ƒêang d·ª± ƒëo√°n..."):
            mortality_risk, los_pred = predict_mortality(patient_info, events, model, scaler, feature_names)
            if mortality_risk is not None:
                prediction_record = {
                    'timestamp': datetime.now(),
                    'event_count': len(events),
                    'mortality_risk': mortality_risk,
                    'los_pred': los_pred
                }
                st.session_state.prediction_history[patient_id].append(prediction_record)
                st.rerun()

    # Display results and charts 
    if events:
        # ============================================================================
        # NEW SECTION: CUMULATIVE EVENTS TABLE
        # ============================================================================
        st.markdown("---")
        st.subheader("üìä B·∫£ng D·ªØ Li·ªáu S·ª± Ki·ªán Li√™n T·ª•c")
        
        # Create display dataframe with forward fill
        display_rows = []
        
        # Track last known values for forward filling
        last_values = {}
        
        for idx, event in enumerate(events, 1):
            row = {
                'S·ª± ki·ªán': f"#{idx}",
                'Th·ªùi gian': event['event_time'].strftime('%H:%M:%S') if isinstance(event['event_time'], datetime) else str(event['event_time'])
            }
            
            # Add vital signs with forward fill
            vital_features = [
                ('heart_rate', 'Nh·ªãp tim'),
                ('mean_bp', 'HA TB'),
                ('temperature', 'Nhi·ªát ƒë·ªô'),
                ('spo2', 'SpO2'),
                ('respiratory_rate', 'Nh·ªãp th·ªü'),
                ('gcs_total', 'GCS'),
                ('lactate', 'Lactate'),
                ('creatinine', 'Creatinine')
            ]
            
            for feature_key, display_key in vital_features:
                value = event.get(feature_key)
                # If value exists and is not None/NaN, update last known value
                if value is not None and value != '' and not (isinstance(value, float) and np.isnan(value)):
                    last_values[feature_key] = value
                    row[display_key] = f"{value}"
                # Otherwise, use forward filled value
                elif feature_key in last_values:
                    row[display_key] = f"{last_values[feature_key]} ‚Üª"  # ‚Üª indicates forward filled
                else:
                    row[display_key] = '-'
            
            # Add drug indicators with forward fill
            drug_features = [
                ('drug_vasopressor_inotropes', 'V·∫≠n m·∫°ch'),
                ('drug_sedative_analgesic', 'An th·∫ßn'),
                ('drug_antibiotic_broad', 'KS'),
                ('drug_diuretic', 'L·ª£i ti·ªÉu'),
                ('drug_anticoagulant', 'Ch·ªëng ƒë√¥ng'),
                ('drug_corticosteroid', 'Cortico')
            ]
            
            drugs = []
            for drug_key, drug_name in drug_features:
                value = event.get(drug_key)
                # Update last known value if present
                if value is not None and value != '':
                    last_values[drug_key] = value
                
                # Check if drug is active (using forward filled value if needed)
                if last_values.get(drug_key, 0) == 1:
                    drugs.append(drug_name)
            
            row['Thu·ªëc'] = ', '.join(drugs) if drugs else '-'
            
            display_rows.append(row)
        
        # Create DataFrame and style it
        events_table_df = pd.DataFrame(display_rows)
        
        # Highlight the last row (most recent event)
        def highlight_last_row(s):
            return ['background-color: #fff3cd' if s.name == len(events_table_df) - 1 else '' for _ in s]
        
        styled_df = events_table_df.style.apply(highlight_last_row, axis=1)
        
        st.dataframe(
            styled_df,
            use_container_width=True,
            height=min(400, 50 + len(events_table_df) * 35)
        )
        
        st.caption(f"üìù T·ªïng s·ªë s·ª± ki·ªán: **{len(events)}** | S·ª± ki·ªán m·ªõi nh·∫•t ƒë∆∞·ª£c t√¥ s√°ng | K√Ω hi·ªáu ‚Üª = gi√° tr·ªã ƒë∆∞·ª£c gi·ªØ t·ª´ l·∫ßn ƒëo tr∆∞·ªõc")
        
        # ============================================================================
        # EXISTING PREDICTION DISPLAY
        # ============================================================================
        st.markdown("---")
        if history:
            latest = history[-1]
            mortality_risk = latest['mortality_risk']
            los_pred = latest['los_pred']
            
            if mortality_risk >= 0.7: risk_class, risk_label, risk_emoji = "high-risk", "R·∫§T CAO ‚ö†Ô∏è", "üî¥"
            elif mortality_risk >= 0.3: risk_class, risk_label, risk_emoji = "medium-risk", "TRUNG B√åNH", "üü°"
            else: risk_class, risk_label, risk_emoji = "low-risk", "TH·∫§P", "üü¢"
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.markdown(f"""<div class="metric-card {risk_class}"><h2 class="metric-value" style="margin:0; color: black">{risk_emoji} {mortality_risk*100:.1f}%</h2><p style="margin:5px 0; color: black">Nguy c∆° t·ª≠ vong: <strong>{risk_label}</strong></p><p style="margin:0; font-size:0.9em; color: black">D·ª±a tr√™n {latest['event_count']} s·ª± ki·ªán</p></div>""", unsafe_allow_html=True)
            with col2:
                st.markdown(f"""<div class="metric-card"><h2 class="metric-value" style="margin:0; color: black">üìÖ {los_pred:.1f} ng√†y</h2><p style="margin:5px 0; color: black">D·ª± ƒëo√°n th·ªùi gian n·∫±m ICU</p><p style="margin:0; font-size:0.9em; color: black">Length of Stay</p></div>""", unsafe_allow_html=True)
            with col3:
                if len(history) >= 2:
                    prev_risk = history[-2]['mortality_risk']
                    risk_change = mortality_risk - prev_risk
                    trend = "üìà" if risk_change > 0 else "üìâ" if risk_change < 0 else "‚û°Ô∏è"
                    
                    if risk_change > 0:
                        change_class = "metric-value-increase"
                    elif risk_change < 0:
                        change_class = "metric-value-decrease"
                    else:
                        change_class = "metric-value-neutral"
                else:
                    trend, risk_change, change_class = "‚û°Ô∏è", 0, "metric-value-neutral"
                
                st.markdown(f"""<div class="metric-card"><h2 class="{change_class}" style="margin:0; color: black">{trend} {abs(risk_change)*100:.1f}%</h2><p style="margin:5px 0; color: black">Thay ƒë·ªïi nguy c∆°</p><p style="margin:0; font-size:0.9em; color: black">So v·ªõi l·∫ßn ƒëo tr∆∞·ªõc</p></div>""", unsafe_allow_html=True)
        
        st.markdown("---")
        st.subheader("üìä Qu·ªπ ƒê·∫°o Nguy C∆° T·ª≠ Vong")
        if len(history) > 0:
            fig = go.Figure()
            fig.add_trace(go.Scatter(
                x=[h['event_count'] for h in history], y=[h['mortality_risk'] * 100 for h in history],
                mode='lines+markers', name='Nguy c∆° t·ª≠ vong', line=dict(color='#d62728', width=3),
                marker=dict(size=10), hovertemplate='S·ª± ki·ªán %{x}<br>Nguy c∆°: %{y:.1f}%<extra></extra>'
            ))
            fig.add_hrect(y0=70, y1=100, fillcolor="red", opacity=0.1, line_width=0)
            fig.add_hrect(y0=30, y1=70, fillcolor="orange", opacity=0.1, line_width=0)
            fig.add_hrect(y0=0, y1=30, fillcolor="green", opacity=0.1, line_width=0)
            fig.update_layout(xaxis_title="S·ªë s·ª± ki·ªán quan s√°t", yaxis_title="Nguy c∆° t·ª≠ vong (%)", yaxis_range=[0, 100],
                              hovermode='x unified', height=400, showlegend=False)
            st.plotly_chart(fig, use_container_width=True)

        # Event details and other charts
        st.markdown("---")
        st.subheader("üìã Chi Ti·∫øt & Di·ªÖn Bi·∫øn")
        latest_event = events[-1]

        col1, col2 = st.columns(2)
        with col1:
            st.markdown("#### üÜï S·ª± Ki·ªán G·∫ßn Nh·∫•t")
            sub_c1, sub_c2 = st.columns(2)
            sub_c1.metric("‚ù§Ô∏è Nh·ªãp tim", f"{latest_event.get('heart_rate', 'N/A')} bpm")
            sub_c1.metric("üå°Ô∏è Nhi·ªát ƒë·ªô", f"{latest_event.get('temperature', 'N/A')}¬∞C")
            sub_c1.metric("ü´Å SpO2", f"{latest_event.get('spo2', 'N/A')}%")
            sub_c1.metric("üß™ Lactate", f"{latest_event.get('lactate', 'N/A')} mmol/L")
            sub_c2.metric("üíâ HA trung b√¨nh", f"{latest_event.get('mean_bp', 'N/A')} mmHg")
            sub_c2.metric("üí® Nh·ªãp th·ªü", f"{latest_event.get('respiratory_rate', 'N/A')}/ph√∫t")
            sub_c2.metric("üß† GCS", latest_event.get('gcs_total', 'N/A'))
            sub_c2.metric("ü©∏ Creatinine", f"{latest_event.get('creatinine', 'N/A')} mg/dL")

        with col2:
            st.markdown("#### üìà Bi·ªÉu ƒê·ªì Sinh Hi·ªáu")
            df_plot = pd.DataFrame(events)
            vital_options = st.multiselect(
                "Ch·ªçn sinh hi·ªáu ƒë·ªÉ hi·ªÉn th·ªã:",
                options=['heart_rate', 'mean_bp', 'temperature', 'spo2', 'respiratory_rate', 'lactate', 'gcs_total', 'platelets'],
                default=['heart_rate', 'mean_bp'],
                format_func=lambda x: FEATURE_LABELS.get(x, x)
            )
            if vital_options:
                fig_vitals = go.Figure()
                for vital in vital_options:
                    if vital in df_plot.columns:
                        fig_vitals.add_trace(go.Scatter(
                            x=list(range(1, len(df_plot) + 1)), y=df_plot[vital],
                            mode='lines+markers', name=FEATURE_LABELS.get(vital, vital),
                            hovertemplate=f'{FEATURE_LABELS.get(vital, vital)}: %{{y}}<extra></extra>'
                        ))
                fig_vitals.update_layout(
                    xaxis_title="S·ªë th·ª© t·ª± s·ª± ki·ªán", yaxis_title="Gi√° tr·ªã", hovermode='x unified',
                    height=350, margin=dict(l=40, r=40, t=40, b=40),
                    legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1)
                )
                st.plotly_chart(fig_vitals, use_container_width=True)
    else:
        st.info("üìù Ch∆∞a c√≥ s·ª± ki·ªán n√†o. Nh·∫•n 'T·∫£i S·ª± Ki·ªán Ti·∫øp Theo' ƒë·ªÉ b·∫Øt ƒë·∫ßu m√¥ ph·ªèng, ho·∫∑c nh·∫≠p th·ªß c√¥ng b√™n d∆∞·ªõi.")
    
    # Manual input form
    st.markdown("---")
    st.subheader("‚úèÔ∏è Th√™m S·ª± Ki·ªán Th·ªß C√¥ng")
    with st.expander("üìù Nh·∫≠p d·ªØ li·ªáu th·ªß c√¥ng"):
        with st.form("manual_event_form"):
            st.markdown("**Sinh hi·ªáu**")
            col1, col2, col3 = st.columns(3)
            with col1:
                hr = st.number_input("Nh·ªãp tim (bpm)", 30, 200, 80)
                sbp = st.number_input("HA t√¢m thu", 70, 250, 120)
                dbp = st.number_input("HA t√¢m tr∆∞∆°ng", 40, 150, 70)
                mbp = st.number_input("HA trung b√¨nh", 50, 180, 85)
            with col2:
                temp = st.number_input("Nhi·ªát ƒë·ªô (¬∞C)", 35.0, 42.0, 37.0, 0.1)
                spo2 = st.number_input("SpO2 (%)", 50, 100, 95)
                resp = st.number_input("Nh·ªãp th·ªü", 5, 50, 16)
                gcs = st.slider("GCS Score", 3, 15, 13)
            with col3:
                lactate = st.number_input("Lactate (mmol/L)", 0.0, 20.0, 2.0, 0.1)
                creat = st.number_input("Creatinine (mg/dL)", 0.0, 15.0, 1.0, 0.1)
                wbc = st.number_input("WBC (√ó10‚Åπ/L)", 0.0, 50.0, 10.0, 0.1)
                hb = st.number_input("Hemoglobin (g/dL)", 5.0, 20.0, 12.0, 0.1)
                plt = st.number_input("Ti·ªÉu c·∫ßu (√ó10‚Åπ/L)", 0.0, 1000.0, 250.0, 1.0)
            
            st.markdown("**Thu·ªëc ƒëang s·ª≠ d·ª•ng**")
            d_col1, d_col2, d_col3 = st.columns(3)
            with d_col1:
                vaso = st.checkbox("Thu·ªëc v·∫≠n m·∫°ch")
                sed = st.checkbox("An th·∫ßn/gi·∫£m ƒëau")
            with d_col2:
                ab = st.checkbox("Kh√°ng sinh ph·ªï r·ªông")
                diu = st.checkbox("L·ª£i ti·ªÉu")
            with d_col3:
                ac = st.checkbox("Ch·ªëng ƒë√¥ng")
                cs = st.checkbox("Corticosteroid")
            
            submit_manual = st.form_submit_button("‚ûï Th√™m S·ª± Ki·ªán", use_container_width=True, type="primary")
            
            if submit_manual:
                manual_event = {
                    'event_time': datetime.now(),
                    'heart_rate': hr, 'systolic_bp': sbp, 'diastolic_bp': dbp, 'mean_bp': mbp,
                    'temperature': temp, 'spo2': spo2, 'respiratory_rate': resp, 'gcs_total': gcs,
                    'lactate': lactate, 'creatinine': creat, 'wbc': wbc, 'hemoglobin': hb, 'platelets': plt,
                    'drug_vasopressor_inotropes': int(vaso), 'drug_sedative_analgesic': int(sed),
                    'drug_antibiotic_broad': int(ab), 'drug_diuretic': int(diu),
                    'drug_anticoagulant': int(ac), 'drug_corticosteroid': int(cs)
                }
                st.session_state.patient_events[patient_id].append(manual_event)
                st.success("‚úÖ ƒê√£ th√™m s·ª± ki·ªán th·ªß c√¥ng!")
                st.rerun()

    # Download Buttons
    if events:
        st.markdown("---")
        dl_col1, dl_col2 = st.columns(2)
        with dl_col1:
            if history:
                history_df = pd.DataFrame(history)
                csv = history_df.to_csv(index=False).encode('utf-8')
                st.download_button("üì• T·∫£i L·ªãch S·ª≠ D·ª± ƒêo√°n (CSV)", data=csv,
                                  file_name=f"prediction_history_{patient_id}.csv", mime='text/csv', use_container_width=True)
        with dl_col2:
            events_df = pd.DataFrame(events)
            csv_events = events_df.to_csv(index=False).encode('utf-8')
            st.download_button("üì• T·∫£i D·ªØ Li·ªáu S·ª± Ki·ªán (CSV)", data=csv_events,
                              file_name=f"events_{patient_id}.csv", mime='text/csv', use_container_width=True)

# Footer
st.markdown("---")
st.caption("‚ö†Ô∏è **L∆∞u √Ω:** ·ª®ng d·ª•ng n√†y ch·ªâ ph·ª•c v·ª• m·ª•c ƒë√≠ch nghi√™n c·ª©u v√† demo. Kh√¥ng s·ª≠ d·ª•ng cho ch·∫©n ƒëo√°n l√¢m s√†ng th·ª±c t·∫ø.")
